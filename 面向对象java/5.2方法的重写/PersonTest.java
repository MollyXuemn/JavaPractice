/**
 * 方法的重写（override/ overwrite）
 * 1. 重写：子类继承父类以后，可以对父类中同名同参数的方法进行覆盖操作
 * 2. 应用：重写以后，当创建子类对象以后，通过对子类对象调用父类中同名同参的方法时，
 * 实际执行的是子类重写父类的方法；
 * 
 * 
 * 面试题: 区分方法的重载与重写
 * 3. 重写的规定：
 *  3.1 方法的声明：权限修饰符 返回值类型 方法名（形参列表) throw 异常类型{
 *                      //方法体     
 *                 }
 *      约定俗称：子类中的叫重写的方法，父类中叫被重写的方法
 *      1. 子类重写的方法的方法名和形参列表与父类被重写的方法名与形参列表相同
 *      2. 子类重写方法的权限修饰符不小于父类被重写的方法的权限修饰符
 *          特殊情况：private 
 *      3. 返回值类型：
 *          > 父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型
 *          也只能是void；
 *          > 父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型
 *          可以是A类或A类的子类。
 *          > 父类被重写的方法的返回值类型是基本数据类型(ex: double)，
 *          则子类重写的方法的返回值类型必须是相同的基本数据类型（必须也是double）
 *      4. 子类重写方法抛出的异常类型不大于父类被重写的方法抛出的异常类型
 *      （具体到异常处理时候见）
 *      5. 子类和父类中的同名参数的方法要么都声明为飞static的（考虑重写），
 *      要么都声明为static的（不是重写）。
 *      
 */

public class PersonTest {
    public static void main(String[] args) {
        Student s = new Student("计算机科学与技术");
        s.eat();
        s.walk(10);

        s.study();

        Person p1 = new Person();
        p1.eat();
    }
}
